enum MediaKind {
	Anime
}

model Media {
	id Int @id @default(autoincrement())

	title       String @db.Citext() @unique
	description String @db.Citext() @default("")

	kind MediaKind
	icon String

	scoreRank   Int?
	score     Float?
	@@index([score(sort: Desc), id])

	popularRank Int?
	popularity  Int?
	@@index([popularity(sort: Desc), id])

	novelty Float?
	@@index([novelty(sort: Desc), id])

	staleStats Boolean @default(true)
	@@index([staleStats, id])

	// TODO
	// updatedAt DateTime @default(now()) @updatedAt
	// createdAt DateTime @default(now())

	userScores UserMediaScore[]
	referred   ExternalMedia[]

	affinitiesAsA MediaAffinity[] @relation("MediaAffinityA")
	affinitiesAsB MediaAffinity[] @relation("MediaAffinityB")

	calculation MediaRanking? @ignore

	embeddings MediaEmbedding[]
	titles     MediaTitle[]
}

model MediaTitle {
	type String @db.Citext() // non-case sensitive

	mediaID Int
	media   Media @relation(fields: [mediaID], references: [id], onUpdate: Cascade, onDelete: Cascade)

	@@unique([mediaID, type])

	title String @db.Citext()

	@@index([title(ops: raw("gin_trgm_ops"))], type: Gin, name: "MediaTitle_title_trgm_idx")
}

model MediaEmbedding {
	type String @db.Citext() // non-case sensitive

	mediaID Int
	media   Media @relation(fields: [mediaID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	@@unique([mediaID, type])

	embedding Unsupported("vector(384)")

	// @@index([embedding(ops: raw("vector_cosine_ops"))], type: Hnsw, name: "MeditaTitle_embedding_vec_idx");
	@@index([embedding])
}

enum ExternalKind {
	MyAnimeList
	AniList
}
model ExternalMedia {
	type ExternalKind
	id   String @id

	media   Media @relation(fields: [mediaID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	mediaID Int

	// any extra data needed to be stored
	data Json @default("{}")

	@@unique([mediaID, type])
}



model MediaAffinity {
	a   Media @relation("MediaAffinityA",fields: [aID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	aID Int /// aID < bID
	b   Media @relation("MediaAffinityB",fields: [bID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	bID Int /// aID < bID

	@@unique([aID, bID])
	@@index([aID, score(sort: Desc), overlap])
	@@index([bID, score(sort: Desc), overlap])

	@@index([aID, bID, overlap(sort: Desc)])

	score     Float @default(0)
	overlap   Int   @default(0)

	// TODO
	// updatedAt DateTime @default(now()) @updatedAt

	stale Boolean @default(true)
	@@index([stale, aID, bID]) // allow index only reads
}


model MediaRanking {
	media Media @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)
	id    Int   @id

	width  Float
	weight Float @default(1.0)
	next   Float?

	@@index([id, weight, width]) // covering index

	outstanding Boolean @default(dbgenerated("(next IS NULL)"))
	@@index([outstanding, id])

	@@index([iteration, outstanding]) // for monitoring progress
	iteration Int @default(0)
}