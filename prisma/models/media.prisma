enum MediaKind {
	Anime
}

model Media {
	id Int @id @default(autoincrement())

	title String @db.Citext() @unique

	kind MediaKind
	icon String

	scoreRank   Int?
	score     Float?
	@@index([score(sort: Desc), id])

	popularRank Int?
	popularity  Int?
	@@index([popularity(sort: Desc), id])

	staleStats Boolean @default(true)
	@@index([staleStats, id])

	userScores UserMediaScore[]
	referred   ExternalMedia[]

	affinitiesAsA MediaAffinity[] @relation("MediaAffinityA")
	affinitiesAsB MediaAffinity[] @relation("MediaAffinityB")
}


enum ExternalKind {
	MyAnimeList
	AniList
}
model ExternalMedia {
	type ExternalKind
	id   String @id

	media   Media @relation(fields: [mediaID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	mediaID Int

	// any extra data needed to be stored
	data Json @default("{}")

	@@unique([mediaID, type])
}



model MediaAffinity {
	a   Media @relation("MediaAffinityA",fields: [aID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	aID Int /// aID < bID
	b   Media @relation("MediaAffinityB",fields: [bID], references: [id], onUpdate: Cascade, onDelete: Cascade)
	bID Int /// aID < bID

	@@unique([aID, bID])
	@@index([aID, score(sort: Desc)])
	@@index([bID, score(sort: Desc)])

	score     Float @default(0)
	overlap   Int   @default(0)
	updatedAt DateTime @default(now()) @updatedAt

	stale Boolean @default(true)
	@@index([stale, aID, bID]) // allow index only reads
}